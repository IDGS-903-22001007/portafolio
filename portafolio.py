from flask import Flask, render_template, request, flash, redirect, url_for
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import ssl

app = Flask(__name__)
app.secret_key = 'mi_clave_secreta_super_segura_2024' 

EMAIL_CONFIG = {
    'smtp_server': 'smtp.gmail.com',
    'smtp_port': 587,
    'email': 'brayan.saul67@gmail.com',
    'password': 'qand byxs aehe zfui'  # Con espacios como te lo dio Google
}

def send_email(name, email, message):
    """Funci√≥n para enviar email con mejor manejo de errores"""
    try:
        print(f"=== INICIANDO ENV√çO DE EMAIL ===")
        print(f"Desde: {EMAIL_CONFIG['email']}")
        print(f"Servidor: {EMAIL_CONFIG['smtp_server']}:{EMAIL_CONFIG['smtp_port']}")
        
        # Crear mensaje
        msg = MIMEMultipart('alternative')
        msg['From'] = EMAIL_CONFIG['email']
        msg['To'] = EMAIL_CONFIG['email']
        msg['Reply-To'] = email
        msg['Subject'] = f'üîî Contacto Portafolio - {name}'
        
        # Cuerpo del mensaje
        body = f"""
üåü NUEVO MENSAJE DESDE TU PORTAFOLIO WEB üåü

üë§ Nombre: {name}
üìß Email: {email}
üìÖ Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

üí¨ Mensaje:
{message}

---
üì± Para responder, simplemente responde a este email.
üåê Enviado desde: bryan-portafolio.com
        """
        
        # Adjuntar texto
        text_part = MIMEText(body, 'plain', 'utf-8')
        msg.attach(text_part)
        
        print("‚úÖ Mensaje creado correctamente")
        
        # Conectar al servidor con SSL
        print("üîå Conectando al servidor SMTP...")
        context = ssl.create_default_context()
        
        with smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port']) as server:
            print("üîê Iniciando TLS...")
            server.starttls(context=context)
            
            print("üîë Iniciando sesi√≥n...")
            server.login(EMAIL_CONFIG['email'], EMAIL_CONFIG['password'])
            
            print("üì§ Enviando mensaje...")
            server.send_message(msg)
            
        print("‚úÖ ¬°Email enviado exitosamente!")
        return True
        
    except smtplib.SMTPAuthenticationError as e:
        print(f"‚ùå Error de autenticaci√≥n: {e}")
        print("üîß Verifica tu contrase√±a de aplicaci√≥n de Gmail")
        print("üìã Pasos:")
        print("   1. Ve a https://myaccount.google.com/apppasswords")
        print("   2. Genera una nueva contrase√±a de aplicaci√≥n")
        print("   3. Reempl√°zala en el c√≥digo")
        return False
        
    except smtplib.SMTPConnectError as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        print("üîß Verifica tu conexi√≥n a internet")
        return False
        
    except smtplib.SMTPException as e:
        print(f"‚ùå Error SMTP: {e}")
        return False
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")
        print(f"‚ùå Tipo de error: {type(e)}")
        return False

def save_message_to_file(name, email, message):
    """Guardar mensaje en archivo local"""
    try:
        with open('mensajes_contacto.txt', 'a', encoding='utf-8') as f:
            f.write(f"""
=== NUEVO MENSAJE ===
Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
Nombre: {name}
Email: {email}
Mensaje: {message}
{'='*50}

""")
        print("Mensaje guardado en archivo local")
        return True
    except Exception as e:
        print(f"Error al guardar mensaje: {e}")
        return False

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/projects')
def projects():
    projects_data = [
        {
            'title': 'EcoSport Frontend - Angular',
            'description': 'Frontend de aplicaci√≥n web para tienda deportiva desarrollado con Angular y TypeScript. Interfaz moderna y responsiva con funcionalidades completas de e-commerce, incluyendo cat√°logo de productos, carrito de compras y gesti√≥n de usuarios.',
            'technologies': ['Angular', 'TypeScript', 'HTML5', 'CSS3', 'Bootstrap', 'RxJS'],
            'github_url': 'https://github.com/IDGS-903-22001007/angular-producto-app',
            'features': ['SPA con Angular', 'Dise√±o responsivo', 'Componentes reutilizables', 'Routing din√°mico', 'Integraci√≥n con API REST']
        },
        {
            'title': 'EcoSport API - Backend C#',
            'description': 'API REST desarrollada en C# .NET para el backend de la tienda deportiva EcoSport. Maneja toda la l√≥gica de negocio, autenticaci√≥n, gesti√≥n de productos y procesamiento de pedidos con arquitectura robusta.',
            'technologies': ['C#', '.NET Core', 'Entity Framework', 'SQL Server', 'API REST', 'JWT'],
            'github_url': 'https://github.com/IDGS-903-22001007/ApiEcoSport',
            'features': ['API RESTful completa', 'Autenticaci√≥n JWT', 'CRUD de productos', 'Gesti√≥n de pedidos', 'Base de datos SQL Server']
        },
        {
            'title': 'App de Riego Autom√°tico - Android',
            'description': 'Aplicaci√≥n m√≥vil desarrollada en Android con Kotlin para controlar un sistema de riego autom√°tico. Permite monitorear y gestionar el riego de plantas de forma remota mediante una interfaz intuitiva.',
            'technologies': ['Kotlin', 'Android Studio', 'XML Layouts', 'IoT'],
            'github_url': 'https://github.com/IDGS-903-22001007/AndroidRiego',
            'features': ['Control remoto de riego', 'Monitoreo en tiempo real', 'Programaci√≥n de horarios', 'Interfaz nativa Android']
        },
        {
            'title': 'API Dragon Ball - Kotlin', 
            'description': 'API REST desarrollada en Kotlin para consultar informaci√≥n de personajes, transformaciones y sagas de Dragon Ball. Proyecto que demuestra conocimientos en desarrollo de APIs y programaci√≥n en Kotlin.',
            'technologies': ['Kotlin', 'API REST', 'JSON', 'Android'],
            'github_url': 'https://github.com/IDGS-903-22001007/ApiDragonBall',
            'features': ['Endpoints de personajes', 'Consultas de transformaciones', 'Informaci√≥n de sagas', 'Respuestas JSON']
        }
    ]
    return render_template('projects.html', projects=projects_data)

@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        name = request.form.get('name', '').strip()
        email = request.form.get('email', '').strip()
        message = request.form.get('message', '').strip()
        
        print(f"\n=== NUEVO FORMULARIO RECIBIDO ===")
        print(f"Nombre: {name}")
        print(f"Email: {email}")
        print(f"Mensaje: {message[:50]}...")
        
        # Validaci√≥n mejorada
        if not name or not email or not message:
            print("‚ùå Formulario incompleto")
            flash('Por favor, completa todos los campos.', 'error')
            return render_template('contact.html')
        
        if '@' not in email or '.' not in email.split('@')[-1]:
            print("‚ùå Email inv√°lido")
            flash('Por favor, ingresa un email v√°lido.', 'error')
            return render_template('contact.html')
        
        print("‚úÖ Validaci√≥n pasada, intentando enviar...")
        
        # Intentar enviar email
        email_sent = send_email(name, email, message)
        
        if email_sent:
            print("‚úÖ Email enviado correctamente")
            flash('¬°Mensaje enviado correctamente! Te responder√© pronto.', 'success')
        else:
            print("‚ùå Email fall√≥, guardando en archivo...")
            if save_message_to_file(name, email, message):
                flash('¬°Mensaje recibido y guardado! Te contactar√© pronto.', 'success')
            else:
                flash('Hubo un error. Por favor, intenta contactarme directamente.', 'error')
        
        return redirect(url_for('contact'))
    
    return render_template('contact.html')

if __name__ == '__main__':
    app.run(debug=True, host='127.0.0.1', port=5000)

